global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet sb "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet lr() "left( right)" iA 
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr[] "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet "(\s|[^\\])sum" "sum" rwA
\sum_{i=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

context "math()"
snippet "(\s|[^\\])lim" "limit" rwA
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet part "d/dx" wA
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet diff "d/dx" wA
\frac{d ${1:V}}{d ${2:x}} $0
endsnippet

context "math()"
snippet "(\s|[^\\])sq" "square root" rwA
`!p snip.rv=match.group(1)`\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet "([0-9]|\s)ee" "d/dx" riA
`!p snip.rv=match.group(1)`\cdot 10^{$1}$
endsnippet

context "env("itemize")"
snippet ite "Itemize" bA
\item $0
endsnippet

context "math()"
snippet "(\s|[^\\])abs" "absolute" riA
`!p snip.rv=match.group(1)`|$1|$0
endsnippet

context "math()"
snippet "(\s|[^\\])int" "integral" rwA
`!p snip.rv=match.group(1)`\int_{${1:a}}^{${2:b}} $0
endsnippet

context "math()"
snippet umb "underbrace" wA
\underbrace{${1:a}}_{${2:b}} 
endsnippet

context "math()"
snippet eval "evaluate" wA
\bigg\rvert_{$1}^{$2}$0
endsnippet

context "math()"
snippet fu "function" iA
(${1:x})$0
endsnippet

priority 100
context "math()"
snippet rsi "round siunit" wA
\SI[round-precision=$1, round-mode=${2:figures}]{$3}{$4}$0
endsnippet

priority 10
context "math()"
snippet "(\s|[0-9])si" "siunit" rwA
`!p snip.rv=match.group(1)`\SI{$1}{$2}$0
endsnippet

priority 1
context "math()"
snippet si "siunit" i
\SI{$1}{$2}$0
endsnippet